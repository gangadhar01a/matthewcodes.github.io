<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MatthewCodes]]></title>
  <link href="http://matthewcodes.github.io/atom.xml" rel="self"/>
  <link href="http://matthewcodes.github.io/"/>
  <updated>2015-04-18T21:45:43+01:00</updated>
  <id>http://matthewcodes.github.io/</id>
  <author>
    <name><![CDATA[Matthew Wilson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js FeedWidget]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/18/react-dot-js-feedwidget/"/>
    <updated>2015-04-18T20:33:10+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/18/react-dot-js-feedwidget</id>
    <content type="html"><![CDATA[<p>Adding a &ldquo;Recent Posts&rdquo; widget to my site <a href="http://www.mwil.so">mwil.so</a> using React.js</p>

<!-- more -->


<p>After setting up this blog, I wanted to add a link to my personal website. I felt it was a good opportunity to make a simple &ldquo;Feed Widget&rdquo; using <a href="https://facebook.github.io/react/">React.js</a>, that could be reused by others.</p>

<h1>What&rsquo;s React.js?</h1>

<p>React.js is a javascript library, created by FaceBook, that allows developers to build reusable user interface components. One good example is a comments box similar to the Disqus comments at the bottom of this page. The <a href="https://facebook.github.io/react/docs/tutorial.html">sample tutorial</a> on the react site takes you through creating a comment box of your own.</p>

<p>I like using React because it allows you to create self contained components that take care of updating and rendering themselves. I have used it extensively on a <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch">site I&rsquo;m working on</a> for the navigation bar, footer, video and audio players, and I feel it has allowed me to make components with a lot of dynamic behaviour with no issues.</p>

<h1>FeedWidget</h1>

<p>FeedWidget is the unimaginative name I&rsquo;ve given to the component I&rsquo;ve created for displaying posts from an rss or atom feed on a webpage, it can be seen in action at the bottom <a href="http://mwil.so/">my mwil.so site</a>.</p>

<p>Built using React.js, it fetches the <a href="http://matthewcodes.github.io/atom.xml">atom feed from this blog</a>, parses the contents, and displays them as html. It&rsquo;s simple enough to be a good introduction into using React.</p>

<h3>Setting Up</h3>

<p>Download the React starter kit <a href="https://facebook.github.io/react/downloads/react-0.13.1.zip">here</a> and copy the <code>build/react.js</code> and <code>build/JSXTransformer.js</code> files into your project directory. Then create an <code>index.html</code> page with the following contents:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="build/react.js"&gt;&lt;/script&gt;
    &lt;script src="build/JSXTransformer.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="example"&gt;&lt;/div&gt;
    &lt;script type="text/jsx"&gt;
      React.render(
        &lt;h1&gt;Hello, world!&lt;/h1&gt;,
        document.getElementById('example')
      );
    &lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Loading the page will cause &lsquo;Hello, World!&rsquo; to be rendered as an <code>h1</code> element in the example <code>div</code>.</p>

<h3>Fetching Posts</h3>

<p>To retrieve and parse the posts from the atom.xml I used a jQuery plugin called <a href="https://github.com/jfhovinne/jFeed">JFeed</a> The repository hasn&rsquo;t been updated in 4 years and I had to make a few simple tweeks to get it to work with the latest version jQuery. My tweeked version can be found in the FeedWidget repo <a href="https://github.com/matthewcodes/FeedWidget/blob/master/js/jquery.jfeed.js">here</a></p>

<p>Once you have added it to your project, retrieving posts is a small bit of code:</p>

<pre><code>jQuery.getFeed({
  url: 'http://matthewcodes.github.io/atom.xml',
  success: function(feed) {
    //do something with feed!
  }
});
</code></pre>

<h3>Using React to render posts</h3>

<p>Update your index.html so it looks like this:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="http://code.jquery.com/jquery-1.11.2.min.js"&gt;&lt;/script&gt;
    &lt;script src="js/jquery.jfeed.js"&gt;&lt;/script&gt;
    &lt;script src="js/react.js"&gt;&lt;/script&gt;
    &lt;script src="js/JSXTransformer.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="feed"&gt;&lt;/div&gt;
    &lt;script type="text/jsx" src="js/FeedWidget.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Notice we have added a new script import to the bottom called <code>FeedWidget.js</code>, create a blank file called <code>FeedWidget.js</code> in your js folder.</p>

<p>Add the following content to the FeedWidget file:</p>

<pre><code>var LiveAlert = React.createClass({
  render : function() {
    return (&lt;div&gt;&lt;p&gt;Loading Posts&lt;/p&gt;&lt;/div&gt;);
  }
});

React.render(
  &lt;LiveAlert/&gt;,
  document.getElementById('feed')
);
</code></pre>

<p>If you load up your index.html file you will see the message &ldquo;Loading Posts&rdquo; rendered on the page.</p>

<p>To fetch posts we can add our jFeed call to one of the Lifecycle events <a href="https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount">componentDidMount</a> this gets &ldquo;Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.&rdquo; So it is a perfect place to add our ajax call:</p>

<pre><code>var LiveAlert = React.createClass({
  getInitialState: function() {
  return {
       data : undefined
    };
  },
  componentDidMount: function() {
    var widget = this;
    jQuery.getFeed({
      url: this.props.url,
      success: function(feed) {
        if(widget.isMounted()) {
          widget.setState({
            data: feed
          });
        }
      }
    });
  },
  render : function() {
     ...
  }
});
</code></pre>

<p>Notice in the componentDidMount function we have added our <code>getFeed</code> call, and in the <code>success</code> function we call <code>widget.setState</code>, when the <code>setState</code> method is called it updates the state object and causes react to re-render the component.</p>

<p>Also notice I have added a <code>getInitialState</code> function, this is used by react to set up the default state of the component, although it&rsquo;s not really necessary in this example.</p>

<p>You can also see that the url we are calling to fetch the posts is set as a property: <code>this.props.url</code>, this is passed in when we render the component like so:</p>

<pre><code>React.render(
  &lt;LiveAlert url="http://matthewcodes.github.io/atom.xml" lengthOfExcerpt="78"/&gt;,
  document.getElementById('feed')
);
</code></pre>

<p>I have also added a <code>lengthOfExcerpt</code> property that we will use later.</p>

<p>At this point our component is fetching the posts and storing them in the component&rsquo;s state, the next step is to render the posts, and we do this in the render function.</p>

<p>Add the following code to replace the render function:</p>

<pre><code>removeCdata : function(text) {
  return text.replace("&lt;![CDATA[", "").replace("]]&gt;","").trim();
},
render : function() {

  if(this.state.data) {

    var widget = this;

    var items = this.state.data.items.map(function(item) {
        var title = widget.removeCdata(item.title);
        var description = widget.removeCdata(item.description);
        description = description.substring(0, widget.props.lengthOfExcerpt);

        return (
          &lt;div&gt;
            &lt;a href={item.link}&gt;&lt;h1&gt;{title}&lt;/h1&gt;&lt;/a&gt;
            &lt;p&gt;{description}&lt;/p&gt;
          &lt;/div&gt;
        );
    });

    return(
      &lt;div&gt;
        {items}
      &lt;/div&gt;
    );

  } else {
    return (&lt;div&gt;&lt;p&gt;Loading Posts&lt;/p&gt;&lt;/div&gt;);
  }
}
</code></pre>

<p>Most of the code here is self explanatory, but the most important part to understand is what we return from this function is what gets rendered on the page, so from the code above:</p>

<pre><code>var items = this.state.data.items.map(function(item) {
    var title = widget.removeCdata(item.title);
    var description = widget.removeCdata(item.description);
    description = description.substring(0, widget.props.lengthOfExcerpt);

    return (
      &lt;div&gt;
        &lt;a href={item.link}&gt;&lt;h1&gt;{title}&lt;/h1&gt;&lt;/a&gt;
        &lt;p&gt;{description}&lt;/p&gt;
      &lt;/div&gt;
    );
});

return(
  &lt;div&gt;
    {items}
  &lt;/div&gt;
);
</code></pre>

<p>Returns a div containing the all the items, which have been stored in the items variable.</p>

<p>I have intentionally avoided adding any styling to the widget so that others can customise it for their sites. On my own site I use bootstrap to take care of the styling for me.</p>

<p>If you want to see the complete source code for the widget it is available on <a href="https://github.com/matthewcodes/FeedWidget">GitHub</a> and a working example can be viewed <a href="http://mwil.so/">here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Video Streaming - Azure Media Services]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/14/live-video-streaming-azure/"/>
    <updated>2015-04-14T20:20:32+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/14/live-video-streaming-azure</id>
    <content type="html"><![CDATA[<p>Live streaming with Azure Media Services and YouTube, how hard can it be?</p>

<!-- more -->


<p>Recently I have been working on redesigning my church&rsquo;s website <a href="http://mwil.so/sbc">(sneak preview here)</a>, with the new design I wanted to update the technology that we use for our live broadcasts of the Sunday services.</p>

<p>We use Influxis as our streaming provider which costs around £200 per year. As we started live streaming several years ago our current plan isn&rsquo;t offered anymore and if we wanted to update to a newer plan the cheapest is $95 per month, which is too expensive; considering it is only used twice on a Sunday.</p>

<p>There are several other reasons why I wanted to look into other options:</p>

<ul>
<li>Our plan only permitted 20 simultaneous connections</li>
<li>As our plan is no longer offered, we are also stuck with a broken admin portal, many of the features are missing.</li>
<li>It is flash based, so only really works properly on desktops</li>
<li>Quality is poor with limited bandwidth permitted by the plan.</li>
</ul>


<p>Once I had completed the new design for the site, my next task was to look into new streaming options. My first port of call was <a href="http://azure.microsoft.com/en-gb/services/media-services/">Azure Media Services</a></p>

<h1>Azure Media Services</h1>

<p>Azure Media Services provide the capability to stream live events using the Azure cloud platform.</p>

<p>To get started I followed the guide <a href="http://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/">here</a>, it guides you through a step by step process on starting live streaming using the Azure portal.</p>

<p>We use Flash Media Live Encoder as our program of choice for broadcasting the stream and I was keen to continue using it, as there are other people in the church that help with the broadcasts and I wanted the impact on them to be as small as possible. I followed the guide <a href="http://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/">here</a> to configure FMLE.</p>

<p>Following the steps above enabled me to get a live stream up and running without too much pain, however as I said before there are other less technical people who help with the broadcast and I needed to make a simple process to start and stop streaming in Azure.</p>

<h2>Media Services REST API</h2>

<p>To start and stop streaming without using the portal, I decided to use the <a href="https://msdn.microsoft.com/en-us/library/azure/hh973617.aspx">Media Services REST API</a> this provides all the necessary endpoints for creating the resources you need in Azure. The tricky part was determining what resources I actually needed, after a lot of experimentation here are the calls necessary for a live stream:</p>

<ol>
<li>First you need to get an access token, a guide on how to do that is <a href="https://msdn.microsoft.com/en-us/library/azure/jj129576.aspx#get_token">here</a>.</li>
<li>You then need to make a request to <a href="https://media.windows.net/">https://media.windows.net/</a> which should respond with a 301 code and a redirect url, this is the url that you need to use for all subsequent calls to the REST API.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783468.aspx#start_create_streaming_endpoints">Start the StreamingEndpoint</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783458.aspx#start_channels">Start the Channel</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974277.aspx#create_an_asset">Create an Asset</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783463.aspx#create_programs">Create a Program</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783463.aspx#start_programs">Start the Program</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974297.aspx#create_an_accesspolicy">Create an Access policy</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974308.aspx#create_a_locator">Create a Locator</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974275.aspx#list_files">Retrieve the AssetFile</a></li>
</ol>


<p>The last step is necessary for determining the publish URL i.e. the URL that the stream will be playing at, it has a format like:</p>

<p><a href="http://account_name.origin.mediaservices.windows.net/locator_guid/stream_guid.ism/manifest">http://account_name.origin.mediaservices.windows.net/locator_guid/stream_guid.ism/manifest</a></p>

<p>You can then test your stream by pasting your publish url into <a href="http://dashplayer.azurewebsites.net/">http://dashplayer.azurewebsites.net/</a> which will play the stream for you.</p>

<p>As you can see there were a lot of steps required just to get setup for streaming, what annoyed me was that in the Azure portal this process was only a few mouse clicks!</p>

<p>Luckily for everyone else I have created a java app that can start and tear down the resources in Azure, it is available on GitHub <a href="https://github.com/matthewcodes/AzureMediaServicesManager">here</a>. If you want to know more details on the content of all the requests and responses and how they are used have a look at the source code.</p>

<h1>Conclusion</h1>

<p>After all this work I had finally got a rough process in place that would allow someone to make a few mouse clicks and have the streaming running live in Azure. However there is a problem, Azure is expensive for this kind of stuff, in fact most cloud platforms are expensive for media encoding and streaming. In the time it took me to create the app which consisted of creating and tearing down resources, and very little streaming I had ate into £10 of my Azure credit.</p>

<p>This worried me, I have £65 per month of credit that I can use and I would be streaming about 10 hours a month. I&rsquo;m hoping that the cost was down to me starting and stopping resources and in the real world the actual cost will be much less. I will update this post with the actual cost per hour once we move to the new streaming system.</p>

<p>I think Azure is a viable option, provided it is cost effective. Other cloud platforms require a 3rd party application to be installed in an instance for live streaming, but Azure supports it out of the box.</p>

<p>However I decided that I needed a backup solution incase we ever run out of credit or I get moved to a non C# project in work and lose my MSDN Subscription (fingers crossed!), for that I turned to YouTube and it&rsquo;s <a href="https://developers.google.com/youtube/v3/live/">Live Stream API</a>. I will cover my YouTube solution in my next blog post.</p>

<p>In the meantime you can check out the code for the new Saintfield Baptist website on GitHub - <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch.">https://github.com/matthewcodes/SaintfieldBaptistChurch.</a> My <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch/blob/master/Client/js/liveVideoPlayer.js">LiveVideoPlayer component created using React.js</a> may also be of interest.</p>
]]></content>
  </entry>
  
</feed>
