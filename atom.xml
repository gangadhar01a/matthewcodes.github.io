<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MatthewCodes]]></title>
  <link href="http://matthewcodes.github.io/atom.xml" rel="self"/>
  <link href="http://matthewcodes.github.io/"/>
  <updated>2015-05-09T01:33:17+01:00</updated>
  <id>http://matthewcodes.github.io/</id>
  <author>
    <name><![CDATA[Matthew Wilson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Camel.js: An Introduction]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/05/09/camel-dot-js-an-introduction/"/>
    <updated>2015-05-09T00:27:49+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/05/09/camel-dot-js-an-introduction</id>
    <content type="html"><![CDATA[<p>A routing and integration framework for node.js</p>

<!-- more -->


<h2>Apache Camel</h2>

<p>In a previous work project I had the privilege of using <a href="http://camel.apache.org/">Apache Camel</a> for creating an <a href="http://en.wikipedia.org/wiki/Enterprise_service_bus">ESB</a>. Camel allows developers to define routing rules using one of the provided domain-specific languages; these include java, spring and blueprint to name a few.</p>

<p>An example of the java dsl can be seen here:</p>

<pre><code>context.addRoutes(new RouteBuilder() {
  public void configure() {
      from("test-jms:queue:test.queue").to("file://test");
  }
});
</code></pre>

<p>This copies something from a queue to a file. Notice how little code was needed to do something that would take quite a number of lines if you were to do it yourself.</p>

<p>I&rsquo;m not going to praise camel any more, I do it enough times a day for people to question my sanity, but theres a famous question on <a href="http://stackoverflow.com/questions/8845186/what-exactly-is-apache-camel">StackOverflow that explains camel much better than I can.</a></p>

<h2>npm</h2>

<p>For the past few months I have been writing a lot javascript for various projects and I&rsquo;ve started to enjoy using node.js for creating server side applications. Coupled with npm (Node Package Manager), it&rsquo;s been easy to utilise different frameworks to get an application up and running in a very short space of time. We used it heavily for a recent <a href="https://github.com/matthewcodes/ping">hackathon project.</a></p>

<p>I&rsquo;ve always been a fan of package managers and have used maven in most of the java projects I&rsquo;ve worked on, I have also pretended to use nuget for C# projects as well (#insideJoke). I wanted to create and publish my own npm package that others could use in their projects, and camel.js was an idea I had been thinking about for a while.</p>

<h2>Camel.js</h2>

<p>My initial plan is to create a &lsquo;camel-like&rsquo; javascript framework that allows people to easily define routes between different endpoints.</p>

<p>My definition of &lsquo;camel-like&rsquo; is a similar DSL to Apache Camel, but using the strengths of node.js, enabling non blocking asynchronous routes. That not only route between built in node modules like <a href="https://nodejs.org/api/fs.html">fs</a>, but also integrate with popular npm packages like <a href="http://expressjs.com/">express</a>.</p>

<p>As of writing this post the current version of camel.js is 0.1.10 and can be installed from npm by running the command:</p>

<pre><code>npm install camel.js
</code></pre>

<p>The stats on the <a href="https://www.npmjs.com/package/camel.js">npm site</a> say that there have been 320 downloads in the past month! But I have my suspicions that most of these are mirrors/bots, as there have been no issues raised yet on github from anyone using the framework!</p>

<p><a href="https://nodei.co/npm/camel.js/"><img src="https://nodei.co/npm/camel.js.png?downloads=true&amp;downloadRank=true&amp;stars=true" alt="NPM" /></a></p>

<p>The current functionality is obviously very limited at this early stage, I have added support for reading and writing to files and have packaged it all up as an npm module.</p>

<p>If you wanted to create a simple file transfer application you first need to require the camel.js module, and create a camel context:</p>

<pre><code>var camel = require('camel.js');
var context = new camel.context();
</code></pre>

<p>You can then define your route and add it to the context:</p>

<pre><code>route = new camel.route();

route.from('file://source.txt')
     .to('file://result.txt');

context.addRoute(route);
</code></pre>

<p>Then start the context, which will process all routes that have been added.</p>

<pre><code>context.start();
</code></pre>

<p>You can define as many routes as you like and because we are using the asynchronous callbacks in our file read/write code, the routes themselves will also be processed asynchronously. You can also have as many endpoints defined in a single route as well like so:</p>

<pre><code>route.from('file://source.txt')
     .to('file://result1.txt');
     .to('file://result2.txt');
     .to('file://result3.txt');
     .to('file://result4.txt');
     .to('file://result5.txt');
</code></pre>

<p>This would copy the content of source.txt to all the result*.txt files.</p>

<p>Another feature that has just been added in the latest release is reading all the files from a directory, this can be done like so:</p>

<pre><code>route.from('file://sourceDirectory')
     .to('file://result.txt');
</code></pre>

<p>Although the code above is pretty pointless as it would overwrite the content of each file in sourceDirectory to result.txt. It will make more sense once I have directory support added to the <code>to</code> function and we can do this:</p>

<pre><code>route.from('file://sourceDirectory')
     .to('file://resultDirectory');
</code></pre>

<h2>Testing</h2>

<p>Once I had my prototype finished, I decided to focus on getting some tests in place so that I could switch to a test driven approach. I decided to use mocha and chai for running and defining the tests (I&rsquo;ll write a separate blog post on how I used them).</p>

<p>These can then be executed locally using the <code>npm test</code> command and they are executed every time I push to GitHub by the Travis CI service, check out the results of the latest build <a href="https://travis-ci.org/matthewcodes/camel.js">here.</a></p>

<h1>Conclusion</h1>

<p>So far the framework is pretty basic, but with the testing framework now in place I can focus on adding new features. I plan to raise issues and milestones in GitHub to help track the progress to the initial 1.0 release. This will hopefully include most of the file component features and perhaps some http as well.</p>

<p>The code for <a href="https://github.com/matthewcodes/camel.js">camel.js is available on my GitHub</a>. Feel free to do a pull request and add some features!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scrolling animations with Animate.css and WOW.js]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/25/scrolling-animations-with-animate-dot-css-and-wow-dot-js/"/>
    <updated>2015-04-25T20:16:04+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/25/scrolling-animations-with-animate-dot-css-and-wow-dot-js</id>
    <content type="html"><![CDATA[<p>Animations without jQuery? Madness!</p>

<!-- more -->


<p><link rel="stylesheet" href="http://matthewcodes.github.io/assets/animation/animate.css"></p>

<p>I&rsquo;ve been working on a website for a customer for a few months, it&rsquo;s gone through several design changes, but I think I&rsquo;ve finally found the right fit. I can&rsquo;t share it with you until it goes live, but picture a single page site with a scroll over hero (like the home page of this blog).</p>

<p>As I was scrolling through the page, I thought we could do something special with the images and larger blocks of text. I&rsquo;ve seen several other sites that fade in or slide up images as you scroll down and thought it would be a nice bit of polish to the site.</p>

<p>I came across 2 libraries that work really well with each other: <a href="http://daneden.github.io/animate.css/">Animate.css</a> and <a href="http://mynameismatthieu.com/WOW/">WOW.js</a></p>

<p>Animate provides a set of predefined CSS animations, similar to the animations provided by Keynote or PowerPoint. And WOW.js adds the ability to trigger these animations as the user scrolls. Exactly what I was looking for.</p>

<p>It&rsquo;s incredibly simple to set up. Your basic html structure is as follows:</p>

<pre><code>&lt;html&gt;
  &lt;head
    &lt;!-- import animate style sheet --&gt;
    &lt;link rel="stylesheet" href="animate.min.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;!-- import and set up wow.js --&gt;
    &lt;script src="js/wow.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    new WOW().init();
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>To add animation to something simply add the <code>animated</code> class and the name of your animation, e.g. <code>fadeInUp</code> (<a href="https://github.com/daneden/animate.css">Full list of animations are on GitHub</a>)</p>

<p>So if we wanted to animate an <code>h1</code> element we could do:</p>

<pre><code>&lt;h1 class="animated fadeInUp"&gt;Hello World&lt;/h1&gt;
</code></pre>

<p>If we want to only animate these elements when the user scrolls down we can remove the <code>animated</code> class and add the <code>wow</code> class like so:</p>

<pre><code>&lt;h1 class="fadeInUp wow"&gt;Hello World&lt;/h1&gt;
</code></pre>

<p>A demo of the libraries can be seen below. The animations only trigger once, so refresh the page if you miss them.</p>

<p>Remember, with great power comes great responsibility!</p>

<h1 class="fadeInUp wow">Demo</h1>




<p class="tada wow">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat</p>




<p class="wobble wow">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat</p>




<p class="swing wow">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat</p>




<p class="rubberBand wow">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat</p>




<script src="http://matthewcodes.github.io/assets/animation/wow.min.js"></script>


<script>
 new WOW().init();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Portfolio: Saintfield Baptist Church]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/20/portfolio-saintfield-baptist-church/"/>
    <updated>2015-04-20T23:12:26+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/20/portfolio-saintfield-baptist-church</id>
    <content type="html"><![CDATA[<p>Website redesign for <a href="http://www.saintfieldbaptist.org.uk">saintfieldbaptist.org.uk</a></p>

<!-- more -->


<p>Over the past few months I have been working on a redesign for a website that I started working on back when I was still in school!</p>

<p>The site was originally set up by someone else back when I had no web development skills (perhaps still true!). As I gained more experience I was able update the site and add more features including: a mobile site, sermon downloads and live streaming services. Using skills learnt while I was on summer placement I was able to add a sql database to store all our sermons, rather than updating an html page each Sunday.</p>

<p>The site helped me to learn and develop my html, css, javascript and php skills. Skills that helped me to further my university progression and professional career.</p>

<p>It has served the church well, but in the past few years is has become extremely dated both in design and content, the only real feature that was kept up to date was the live streaming as it is probably the one feature that is depended on by people who can&rsquo;t make it out to church.</p>

<h2>The Issues</h2>

<p>There were a number of issues that needed to be resolved as part of the redesign:</p>

<ol>
<li><strong>Make it fully responsive</strong> - the existing version had a separate mobile site (built using JQuery Mobile), I wanted to have a single, responsive web site.</li>
<li><strong>Make it easier to maintain</strong> - a simple CMS would help to maintain the content, eventually allowing other people to help with updating the site.</li>
<li><strong>Move our live streaming to a mobile friendly streaming provider.</strong> (<a href="http://localhost:4000/blog/categories/live-streaming/">Read about my live streaming investigations here</a>)</li>
<li><strong>Improve the design</strong> - the <a href="http://matthewcodes.github.io/images/oldDesign.png">previous design</a> was <em>very</em> dated!</li>
<li><strong>Introduce an API</strong> - previously I used php to generate the dynamic content, e.g. the sermons download page. This time around I wanted to create a json api that could be used by the website and potentially native clients.</li>
</ol>


<h2>The Frameworks</h2>

<p>I wanted to use this opportunity to bring the Saintfield site right up to modern standards and use modern frameworks.</p>

<p>I&rsquo;m not a designer so like most I turned to <a href="http://getbootstrap.com/">Twitter&rsquo;s Bootstrap</a> to help with both a mobile first design and a consistent look and feel. Throughout the process I really took the time to become familiar with all of Bootstrap&rsquo;s features and I think it paid off in terms of responsiveness and aesthetics. I&rsquo;m using the <a href="http://www.google.com/fonts/specimen/Lato">Lato font</a> rather than the fonts specified by bootstrap as I felt it suited the site better.</p>

<p>I also wanted to use a framework that ended with &lsquo;.js&rsquo;, the problem with this is that there are so many! The two main contenders were Angular and React. One provides a full MVC framework the other just provides the V.</p>

<p>I used Angular for our <a href="https://github.com/matthewcodes/ping">work hackathon</a> and it really did enable us to add more features to our app in a short period of time. However I felt that Angular would be overkill for such a simple site and with the upcoming Angular 2.0 rewrite, I didn&rsquo;t want something that I would need to rewrite myself in a few months time.</p>

<p>React is a framework that focuses on the user interface, it can be used with other frameworks or by itself and I liked that flexibility. It&rsquo;s also great for building reusable components (<a href="http://localhost:4000/blog/2015/04/18/react-dot-js-feedwidget/">Check out my example in a previous post</a>). My first thought was what elements of the site are repeated across different pages? The answers I came up with were:</p>

<ul>
<li>Navigation Bar</li>
<li>Footer</li>
<li>Upcoming Speakers</li>
<li>Sermon Downloads</li>
</ul>


<p>There were also some components that were not really used in multiple places but did benefit from using react:</p>

<ul>
<li>Video Player</li>
<li>Audio Player</li>
</ul>


<p>These components had some dynamic behaviour and React allowed me to encapsulate that behaviour into a single component.</p>

<h2>The Design</h2>

<p>I decided that I wanted to really try and get the most out of Bootstrap for the site, I made good use of the <a href="http://getbootstrap.com/css/#grid">grid</a> system and <a href="http://getbootstrap.com/css/#responsive-utilities">responsive utility classes.</a></p>

<p>The time spent using Bootstrap to it&rsquo;s potential allowed me to create a site that was consistent and sharp. As well as looking great on mobile devices.</p>

<p><img src="http://matthewcodes.github.io/images/devices.jpg" class="img-responsive"></img></p>

<p>I&rsquo;m not a designer so I found <a href="https://color.adobe.com">Adobe&rsquo;s Colour CC</a> to be really useful when picking the colour scheme.</p>

<h2>The API</h2>

<p>I restructured our database into something that was a bit more normalised, and created a new <code>GetSermons.php</code> that would retrieve and return the sermons in JSON. The php function <code>json_encode</code> made this task incredibly simple.</p>

<p>I&rsquo;m hoping I can reuse the API for an iOS app at some stage in the future, maybe learning some swift along the way.</p>

<h2>The Conclusion</h2>

<p>Overall I feel this has been a good first step into breathing some life into the Saintfield website. My next steps will be deciding what to do for our live stream and creating the necessary tools so that the streaming team can start and stop streams simply.</p>

<p>The source code for the site can be found on my GitHub <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js FeedWidget]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/18/react-dot-js-feedwidget/"/>
    <updated>2015-04-18T20:33:10+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/18/react-dot-js-feedwidget</id>
    <content type="html"><![CDATA[<p>Adding a &ldquo;Recent Posts&rdquo; widget to my site <a href="http://www.mwil.so">mwil.so</a> using React.js</p>

<!-- more -->


<p>After setting up this blog, I wanted to add a link to my personal website. I felt it was a good opportunity to make a simple &ldquo;Feed Widget&rdquo; using <a href="https://facebook.github.io/react/">React.js</a>, that could be reused by others.</p>

<h1>What&rsquo;s React.js?</h1>

<p>React.js is a javascript library, created by FaceBook, that allows developers to build reusable user interface components. One good example is a comments box similar to the Disqus comments at the bottom of this page. The <a href="https://facebook.github.io/react/docs/tutorial.html">sample tutorial</a> on the react site takes you through creating a comment box of your own.</p>

<p>I like using React because it allows you to create self contained components that take care of updating and rendering themselves. I have used it extensively on a <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch">site I&rsquo;m working on</a> for the navigation bar, footer, video and audio players, and I feel it has allowed me to make components with a lot of dynamic behaviour with no issues.</p>

<h1>FeedWidget</h1>

<p>FeedWidget is the unimaginative name I&rsquo;ve given to the component I&rsquo;ve created for displaying posts from an rss or atom feed on a webpage, it can be seen in action at the bottom <a href="http://mwil.so/">my mwil.so site</a>.</p>

<p>Built using React.js, it fetches the <a href="http://matthewcodes.github.io/atom.xml">atom feed from this blog</a>, parses the contents, and displays them as html. It&rsquo;s simple enough to be a good introduction into using React.</p>

<h3>Setting Up</h3>

<p>Download the React starter kit <a href="https://facebook.github.io/react/downloads/react-0.13.1.zip">here</a> and copy the <code>build/react.js</code> and <code>build/JSXTransformer.js</code> files into your project directory. Then create an <code>index.html</code> page with the following contents:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="build/react.js"&gt;&lt;/script&gt;
    &lt;script src="build/JSXTransformer.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="example"&gt;&lt;/div&gt;
    &lt;script type="text/jsx"&gt;
      React.render(
        &lt;h1&gt;Hello, world!&lt;/h1&gt;,
        document.getElementById('example')
      );
    &lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Loading the page will cause &lsquo;Hello, World!&rsquo; to be rendered as an <code>h1</code> element in the example <code>div</code>.</p>

<h3>Fetching Posts</h3>

<p>To retrieve and parse the posts from the atom.xml I used a jQuery plugin called <a href="https://github.com/jfhovinne/jFeed">JFeed</a> The repository hasn&rsquo;t been updated in 4 years and I had to make a few simple tweeks to get it to work with the latest version jQuery. My tweeked version can be found in the FeedWidget repo <a href="https://github.com/matthewcodes/FeedWidget/blob/master/js/jquery.jfeed.js">here</a></p>

<p>Once you have added it to your project, retrieving posts is a small bit of code:</p>

<pre><code>jQuery.getFeed({
  url: 'http://matthewcodes.github.io/atom.xml',
  success: function(feed) {
    //do something with feed!
  }
});
</code></pre>

<h3>Using React to render posts</h3>

<p>Update your index.html so it looks like this:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;script src="http://code.jquery.com/jquery-1.11.2.min.js"&gt;&lt;/script&gt;
    &lt;script src="js/jquery.jfeed.js"&gt;&lt;/script&gt;
    &lt;script src="js/react.js"&gt;&lt;/script&gt;
    &lt;script src="js/JSXTransformer.js"&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="feed"&gt;&lt;/div&gt;
    &lt;script type="text/jsx" src="js/FeedWidget.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Notice we have added a new script import to the bottom called <code>FeedWidget.js</code>, create a blank file called <code>FeedWidget.js</code> in your js folder.</p>

<p>Add the following content to the FeedWidget file:</p>

<pre><code>var LiveAlert = React.createClass({
  render : function() {
    return (&lt;div&gt;&lt;p&gt;Loading Posts&lt;/p&gt;&lt;/div&gt;);
  }
});

React.render(
  &lt;LiveAlert/&gt;,
  document.getElementById('feed')
);
</code></pre>

<p>If you load up your index.html file you will see the message &ldquo;Loading Posts&rdquo; rendered on the page.</p>

<p>To fetch posts we can add our jFeed call to one of the Lifecycle events <a href="https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount">componentDidMount</a> this gets &ldquo;Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.&rdquo; So it is a perfect place to add our ajax call:</p>

<pre><code>var LiveAlert = React.createClass({
  getInitialState: function() {
  return {
       data : undefined
    };
  },
  componentDidMount: function() {
    var widget = this;
    jQuery.getFeed({
      url: this.props.url,
      success: function(feed) {
        if(widget.isMounted()) {
          widget.setState({
            data: feed
          });
        }
      }
    });
  },
  render : function() {
     ...
  }
});
</code></pre>

<p>Notice in the componentDidMount function we have added our <code>getFeed</code> call, and in the <code>success</code> function we call <code>widget.setState</code>, when the <code>setState</code> method is called it updates the state object and causes react to re-render the component.</p>

<p>Also notice I have added a <code>getInitialState</code> function, this is used by react to set up the default state of the component, although it&rsquo;s not really necessary in this example.</p>

<p>You can also see that the url we are calling to fetch the posts is set as a property: <code>this.props.url</code>, this is passed in when we render the component like so:</p>

<pre><code>React.render(
  &lt;LiveAlert url="http://matthewcodes.github.io/atom.xml" lengthOfExcerpt="78"/&gt;,
  document.getElementById('feed')
);
</code></pre>

<p>I have also added a <code>lengthOfExcerpt</code> property that we will use later.</p>

<p>At this point our component is fetching the posts and storing them in the component&rsquo;s state, the next step is to render the posts, and we do this in the render function.</p>

<p>Add the following code to replace the render function:</p>

<pre><code>removeCdata : function(text) {
  return text.replace("&lt;![CDATA[", "").replace("]]&gt;","").trim();
},
render : function() {

  if(this.state.data) {

    var widget = this;

    var items = this.state.data.items.map(function(item) {
        var title = widget.removeCdata(item.title);
        var description = widget.removeCdata(item.description);
        description = description.substring(0, widget.props.lengthOfExcerpt);

        return (
          &lt;div&gt;
            &lt;a href={item.link}&gt;&lt;h1&gt;{title}&lt;/h1&gt;&lt;/a&gt;
            &lt;p&gt;{description}&lt;/p&gt;
          &lt;/div&gt;
        );
    });

    return(
      &lt;div&gt;
        {items}
      &lt;/div&gt;
    );

  } else {
    return (&lt;div&gt;&lt;p&gt;Loading Posts&lt;/p&gt;&lt;/div&gt;);
  }
}
</code></pre>

<p>Most of the code here is self explanatory, but the most important part to understand is what we return from this function is what gets rendered on the page, so from the code above:</p>

<pre><code>var items = this.state.data.items.map(function(item) {
    var title = widget.removeCdata(item.title);
    var description = widget.removeCdata(item.description);
    description = description.substring(0, widget.props.lengthOfExcerpt);

    return (
      &lt;div&gt;
        &lt;a href={item.link}&gt;&lt;h1&gt;{title}&lt;/h1&gt;&lt;/a&gt;
        &lt;p&gt;{description}&lt;/p&gt;
      &lt;/div&gt;
    );
});

return(
  &lt;div&gt;
    {items}
  &lt;/div&gt;
);
</code></pre>

<p>Returns a div containing the all the items, which have been stored in the items variable.</p>

<p>I have intentionally avoided adding any styling to the widget so that others can customise it for their sites. On my own site I use bootstrap to take care of the styling for me.</p>

<p>If you want to see the complete source code for the widget it is available on <a href="https://github.com/matthewcodes/FeedWidget">GitHub</a> and a working example can be viewed <a href="http://mwil.so/">here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Video Streaming - Azure Media Services]]></title>
    <link href="http://matthewcodes.github.io/blog/2015/04/14/live-video-streaming-azure/"/>
    <updated>2015-04-14T20:20:32+01:00</updated>
    <id>http://matthewcodes.github.io/blog/2015/04/14/live-video-streaming-azure</id>
    <content type="html"><![CDATA[<p>Live streaming with Azure Media Services and YouTube, how hard can it be?</p>

<!-- more -->


<p>Recently I have been working on redesigning my church&rsquo;s website <a href="http://mwil.so/sbc">(sneak preview here)</a>, with the new design I wanted to update the technology that we use for our live broadcasts of the Sunday services.</p>

<p>We use Influxis as our streaming provider which costs around £200 per year. As we started live streaming several years ago our current plan isn&rsquo;t offered anymore and if we wanted to update to a newer plan the cheapest is $95 per month, which is too expensive; considering it is only used twice on a Sunday.</p>

<p>There are several other reasons why I wanted to look into other options:</p>

<ul>
<li>Our plan only permitted 20 simultaneous connections</li>
<li>As our plan is no longer offered, we are also stuck with a broken admin portal, many of the features are missing.</li>
<li>It is flash based, so only really works properly on desktops</li>
<li>Quality is poor with limited bandwidth permitted by the plan.</li>
</ul>


<p>Once I had completed the new design for the site, my next task was to look into new streaming options. My first port of call was <a href="http://azure.microsoft.com/en-gb/services/media-services/">Azure Media Services</a></p>

<h1>Azure Media Services</h1>

<p>Azure Media Services provide the capability to stream live events using the Azure cloud platform.</p>

<p>To get started I followed the guide <a href="http://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/">here</a>, it guides you through a step by step process on starting live streaming using the Azure portal.</p>

<p>We use Flash Media Live Encoder as our program of choice for broadcasting the stream and I was keen to continue using it, as there are other people in the church that help with the broadcasts and I wanted the impact on them to be as small as possible. I followed the guide <a href="http://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/">here</a> to configure FMLE.</p>

<p>Following the steps above enabled me to get a live stream up and running without too much pain, however as I said before there are other less technical people who help with the broadcast and I needed to make a simple process to start and stop streaming in Azure.</p>

<h2>Media Services REST API</h2>

<p>To start and stop streaming without using the portal, I decided to use the <a href="https://msdn.microsoft.com/en-us/library/azure/hh973617.aspx">Media Services REST API</a> this provides all the necessary endpoints for creating the resources you need in Azure. The tricky part was determining what resources I actually needed, after a lot of experimentation here are the calls necessary for a live stream:</p>

<ol>
<li>First you need to get an access token, a guide on how to do that is <a href="https://msdn.microsoft.com/en-us/library/azure/jj129576.aspx#get_token">here</a>.</li>
<li>You then need to make a request to <a href="https://media.windows.net/">https://media.windows.net/</a> which should respond with a 301 code and a redirect url, this is the url that you need to use for all subsequent calls to the REST API.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783468.aspx#start_create_streaming_endpoints">Start the StreamingEndpoint</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783458.aspx#start_channels">Start the Channel</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974277.aspx#create_an_asset">Create an Asset</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783463.aspx#create_programs">Create a Program</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/dn783463.aspx#start_programs">Start the Program</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974297.aspx#create_an_accesspolicy">Create an Access policy</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974308.aspx#create_a_locator">Create a Locator</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/azure/hh974275.aspx#list_files">Retrieve the AssetFile</a></li>
</ol>


<p>The last step is necessary for determining the publish URL i.e. the URL that the stream will be playing at, it has a format like:</p>

<p><a href="http://account_name.origin.mediaservices.windows.net/locator_guid/stream_guid.ism/manifest">http://account_name.origin.mediaservices.windows.net/locator_guid/stream_guid.ism/manifest</a></p>

<p>You can then test your stream by pasting your publish url into <a href="http://dashplayer.azurewebsites.net/">http://dashplayer.azurewebsites.net/</a> which will play the stream for you.</p>

<p>As you can see there were a lot of steps required just to get setup for streaming, what annoyed me was that in the Azure portal this process was only a few mouse clicks!</p>

<p>Luckily for everyone else I have created a java app that can start and tear down the resources in Azure, it is available on GitHub <a href="https://github.com/matthewcodes/AzureMediaServicesManager">here</a>. If you want to know more details on the content of all the requests and responses and how they are used have a look at the source code.</p>

<h1>Conclusion</h1>

<p>After all this work I had finally got a rough process in place that would allow someone to make a few mouse clicks and have the streaming running live in Azure. However there is a problem, Azure is expensive for this kind of stuff, in fact most cloud platforms are expensive for media encoding and streaming. In the time it took me to create the app which consisted of creating and tearing down resources, and very little streaming I had ate into £10 of my Azure credit.</p>

<p>This worried me, I have £65 per month of credit that I can use and I would be streaming about 10 hours a month. I&rsquo;m hoping that the cost was down to me starting and stopping resources and in the real world the actual cost will be much less. I will update this post with the actual cost per hour once we move to the new streaming system.</p>

<p>I think Azure is a viable option, provided it is cost effective. Other cloud platforms require a 3rd party application to be installed in an instance for live streaming, but Azure supports it out of the box.</p>

<p>However I decided that I needed a backup solution incase we ever run out of credit or I get moved to a non C# project in work and lose my MSDN Subscription (fingers crossed!), for that I turned to YouTube and it&rsquo;s <a href="https://developers.google.com/youtube/v3/live/">Live Stream API</a>. I will cover my YouTube solution in my next blog post.</p>

<p>In the meantime you can check out the code for the new Saintfield Baptist website on GitHub - <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch.">https://github.com/matthewcodes/SaintfieldBaptistChurch.</a> My <a href="https://github.com/matthewcodes/SaintfieldBaptistChurch/blob/master/Client/js/liveVideoPlayer.js">LiveVideoPlayer component created using React.js</a> may also be of interest.</p>
]]></content>
  </entry>
  
</feed>
